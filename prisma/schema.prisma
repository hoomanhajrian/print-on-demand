datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["jsonProtocol"]
}

enum Role {
  ADMIN
  EDITOR
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String?
  expires      DateTime

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @default("")
  image         String?
  role          Role      @default(USER)
  first_name    String?
  last_name     String?
  age           Int?
  password_hash String?
  active        Boolean   @default(true)
  active_at     DateTime  @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())

  reviewsFrom Review[]  @relation("ReviewsFrom")
  reviewsTo   Review[]  @relation("ReviewsTo")
  orders      Order[]
  printers    Printer[]
  gigs        Gig[]
  accounts    Account[]
  sessions    Session[]
}

model VerificationToken {
  id      String
  token   String   @unique
  expires DateTime

  @@unique([id, token])
}

model Order {
  id             String   @id @default(cuid())
  client         User     @relation(fields: [client_id], references: [id])
  client_id      String
  printer        Printer  @relation(fields: [printer_id], references: [id])
  printer_id     String
  status         String // 'pending', 'accepted', etc. - Use enum in your application logic
  price          Float
  address        String   @default("")
  payment_status String // 'pending', 'paid', 'refunded' - Use enum in your application logic
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  review         Review? // One-to-one with Review
}

model Gig {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int
  price       Float
  imageUrl    String?
  category    String?
  tags        String[] // Keywords for search and filtering
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  printers Printer[] @relation("GigPrinters")
  user     User      @relation(fields: [user_id], references: [id])
  user_id  String
}

model Printer {
  id              String           @id @default(cuid())
  brand           String           @default("")
  model           String           @default("")
  max_dimentions  Json
  user            User             @relation(fields: [user_id], references: [id])
  user_id         String
  gigs            Gig[]            @relation("GigPrinters")
  orders          Order[]
  materialCharges MaterialCharge[]
}

model MaterialCharge {
  id            String  @id @default(cuid())
  material      String
  chargePerHour Float
  printer       Printer @relation(fields: [printer_id], references: [id])
  printer_id    String
}

model Review {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [order_id], references: [id])
  order_id   String   @unique
  from       User     @relation("ReviewsFrom", fields: [from_id], references: [id])
  from_id    String
  to         User     @relation("ReviewsTo", fields: [to_id], references: [id])
  to_id      String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
}
